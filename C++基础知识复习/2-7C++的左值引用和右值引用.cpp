

#include<iostream>

using namespace std;

/*
	1：C++的引用和指针的区别？
		1）：引用是一种更安全的指针（引用必须初始化，指针可以不初始化）
		2）：引用必须要初始化的，指针可以不初始化
		3）：引用只有一级引用，指针可以有多级指针
		4）：定义一个引用变量和定义一个指针，其汇编指令是一模一样的；通过引用变量修改
		所引用内存的值与使用指针通过解引用修改内存的值也是一样的
		5）：引用是一块内存的别名
	2：左值引用和右值引用
*/
#if 0
int main()
{
	int a = 10;
	int* p = &a; // 指针
	int& b = a; // 引用
	
	cout << a << ' ' << *p << ' ' << b << endl;
	//通过指针修改内存的值
	*p = 20;
	cout << a << ' ' << *p << ' ' << b << endl;

	int arr[5] = {};
	int* p1 = arr;
	//定义一个引用变量，来引用数组
	int(&q)[5] = arr;
	cout << sizeof(arr) << endl;
	cout << sizeof(p1) << endl;
	cout << sizeof(q) << endl;
	return 0;
}
#endif

//2:左值和右值的区别

/*
	1）：int && c = 20; 专门用来引用右值类型，指令上，可以自动生产临时量然后
	直接引用临时量 c = 40
	2）：右值引用变量本身是一个左值。只能用左值引用来引用它
	3）：不能用一个右值引用变量，来引用一个左值
*/
int main()
{
	int a = 10; // 左值，有内存，有名字，值可以修改
	int& b = a;

	//int& c = 10;  // 临时变量10是一个右值：没内存，没名字
	//C++11 右值引用
	// 右值引用必须生成临时量
	int&& c = 10;  // 可以修改这个临时量的内存 如: c = 20

	int& x = c; //表明右值引用变量，本身也是一个左值
	//int&& y = c; //不能使用右值引用变量引用左值



	/*
		int temp = 10
		temp->d
	*/
	const int& d = 10;
	return 0;
}